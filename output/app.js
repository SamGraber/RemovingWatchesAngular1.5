/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(1);
	var watchInTemplate_1 = __webpack_require__(2);
	var watchInBindings_1 = __webpack_require__(4);
	var watchInService_1 = __webpack_require__(7);
	angular.module('app', [watchInTemplate_1.moduleName, watchInBindings_1.moduleName, watchInService_1.moduleName]);
	angular.bootstrap(document, ['app']);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUVuQyxnQ0FBb0QsbUNBQW1DLENBQUMsQ0FBQTtBQUN4RixnQ0FBb0QsbUNBQW1DLENBQUMsQ0FBQTtBQUN4RiwrQkFBbUQsaUNBQWlDLENBQUMsQ0FBQTtBQUVyRixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLDRCQUFxQixFQUFFLDRCQUFxQixFQUFFLDJCQUFvQixDQUFDLENBQUMsQ0FBQztBQUU1RixPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMifQ==

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = angular;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(1);
	exports.moduleName = 'watchInTemplate';
	var WatchInTemplateController = (function () {
	    function WatchInTemplateController($scope) {
	        var _this = this;
	        $scope.$watch('controller.watchedValue', function (value) {
	            _this.doubledValue = _this.watchedValue * 2;
	        });
	    }
	    WatchInTemplateController.$inject = ['$scope'];
	    return WatchInTemplateController;
	}());
	function watchInTemplate() {
	    return {
	        restrict: 'E',
	        template: __webpack_require__(3),
	        controller: 'WatchInTemplateController',
	        controllerAs: 'controller',
	        scope: {},
	    };
	}
	angular.module(exports.moduleName, [])
	    .controller('WatchInTemplateController', WatchInTemplateController)
	    .directive('tsWatchInTemplate', watchInTemplate);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2hJblRlbXBsYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2F0Y2hJblRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUV0QixrQkFBVSxHQUFXLGlCQUFpQixDQUFDO0FBRXBEO0lBS0MsbUNBQVksTUFBc0I7UUFMbkMsaUJBVUM7UUFKQyxNQUFNLENBQUMsTUFBTSxDQUFDLHlCQUF5QixFQUFFLFVBQUMsS0FBYTtZQUN0RCxLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUxNLGlDQUFPLEdBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQU12QyxnQ0FBQztBQUFELENBQUMsQUFWRCxJQVVDO0FBRUQ7SUFDQyxNQUFNLENBQUM7UUFDTixRQUFRLEVBQUUsR0FBRztRQUNiLFFBQVEsRUFBRSxPQUFPLENBQUMsd0JBQXdCLENBQUM7UUFDM0MsVUFBVSxFQUFFLDJCQUEyQjtRQUN2QyxZQUFZLEVBQUUsWUFBWTtRQUMxQixLQUFLLEVBQUUsRUFBRTtLQUNULENBQUM7QUFDSCxDQUFDO0FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBVSxFQUFFLEVBQUUsQ0FBQztLQUM1QixVQUFVLENBQUMsMkJBQTJCLEVBQUUseUJBQXlCLENBQUM7S0FDbEUsU0FBUyxDQUFDLG1CQUFtQixFQUFFLGVBQWUsQ0FBQyxDQUFDIn0=

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = "<h2>Watch In Template</h2>\r\n<div>\r\n\t<label for=\"watchedValue\">Watched value:</label>\r\n\t<input type=\"number\" name=\"watchedValue\" ng-model=\"controller.watchedValue\" />\r\n</div>\r\n<div>\r\n\t<label>Doubled value:</label>\r\n\t{{controller.doubledValue}}\r\n</div>"

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(1);
	exports.moduleName = 'watchInBindings';
	var WatchInBindingsParentController = (function () {
	    function WatchInBindingsParentController() {
	        this.string = 'Another string';
	    }
	    return WatchInBindingsParentController;
	}());
	function watchInBindingsParent() {
	    return {
	        restrict: 'E',
	        template: __webpack_require__(5),
	        controller: 'WatchInBindingsParentController',
	        controllerAs: 'controller',
	        scope: {},
	    };
	}
	var WatchInBindingsChildController = (function () {
	    function WatchInBindingsChildController($scope) {
	        var _this = this;
	        $scope.$watch('controller.binding', function (value) {
	            _this.doubledValue = value * 2;
	        });
	    }
	    WatchInBindingsChildController.$inject = ['$scope'];
	    return WatchInBindingsChildController;
	}());
	function watchInBindingsChild() {
	    return {
	        restrict: 'E',
	        template: __webpack_require__(6),
	        controller: 'WatchInBindingsChildController',
	        controllerAs: 'controller',
	        scope: {},
	        bindToController: {
	            binding: '<',
	            string: '@',
	            interpolatedString: '@',
	            twoWay: '=',
	        },
	    };
	}
	angular.module(exports.moduleName, [])
	    .controller('WatchInBindingsParentController', WatchInBindingsParentController)
	    .directive('tsWatchInBindings', watchInBindingsParent)
	    .controller('WatchInBindingsChildController', WatchInBindingsChildController)
	    .directive('tsWatchInBindingsChild', watchInBindingsChild);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2hJbkJpbmRpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2F0Y2hJbkJpbmRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLE9BQU8sV0FBTSxTQUFTLENBQUMsQ0FBQTtBQUV0QixrQkFBVSxHQUFXLGlCQUFpQixDQUFDO0FBRXBEO0lBS0M7UUFDQyxJQUFJLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFDO0lBQ2hDLENBQUM7SUFDRixzQ0FBQztBQUFELENBQUMsQUFSRCxJQVFDO0FBRUQ7SUFDQyxNQUFNLENBQUM7UUFDTixRQUFRLEVBQUUsR0FBRztRQUNiLFFBQVEsRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDO1FBQ2xDLFVBQVUsRUFBRSxpQ0FBaUM7UUFDN0MsWUFBWSxFQUFFLFlBQVk7UUFDMUIsS0FBSyxFQUFFLEVBQUU7S0FDVCxDQUFDO0FBQ0gsQ0FBQztBQUVEO0lBUUMsd0NBQVksTUFBc0I7UUFSbkMsaUJBYUM7UUFKQyxNQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLFVBQUMsS0FBYTtZQUNqRCxLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBTE0sc0NBQU8sR0FBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBTXZDLHFDQUFDO0FBQUQsQ0FBQyxBQWJELElBYUM7QUFFRDtJQUNDLE1BQU0sQ0FBQztRQUNOLFFBQVEsRUFBRSxHQUFHO1FBQ2IsUUFBUSxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUM7UUFDakMsVUFBVSxFQUFFLGdDQUFnQztRQUM1QyxZQUFZLEVBQUUsWUFBWTtRQUMxQixLQUFLLEVBQUUsRUFBRTtRQUNULGdCQUFnQixFQUFFO1lBQ2pCLE9BQU8sRUFBRSxHQUFHO1lBQ1osTUFBTSxFQUFFLEdBQUc7WUFDWCxrQkFBa0IsRUFBRSxHQUFHO1lBQ3ZCLE1BQU0sRUFBRSxHQUFHO1NBQ1g7S0FDRCxDQUFDO0FBQ0gsQ0FBQztBQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsa0JBQVUsRUFBRSxFQUFFLENBQUM7S0FDNUIsVUFBVSxDQUFDLGlDQUFpQyxFQUFFLCtCQUErQixDQUFDO0tBQzlFLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxxQkFBcUIsQ0FBQztLQUNyRCxVQUFVLENBQUMsZ0NBQWdDLEVBQUUsOEJBQThCLENBQUM7S0FDNUUsU0FBUyxDQUFDLHdCQUF3QixFQUFFLG9CQUFvQixDQUFDLENBQUMifQ==

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = "<h2>Watch In Bindings</h2>\r\n<h4>Parent</h4>\r\n<div>Two way: {{controller.twoWayValue}}</div>\r\n<div>\r\n\t<label for=\"watchedValue\">Watched value:</label>\r\n\t<input type=\"number\" name=\"watchedValue\" ng-model=\"controller.watchedValue\" />\r\n</div>\r\n<ts-watch-in-bindings-child binding=\"controller.watchedValue\"\r\n\t\t\t\t\t\t\tstring=\"A string\" interpolated-string=\"controller.string\" two-way=\"controller.twoWayValue\"></ts-watch-in-bindings-child>"

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = "<h4>Child</h4>\r\n<div>String: {{controller.string}}</div>\r\n<div>Interpolated string: {{controller.interpolatedString}}</div>\r\n<div>Two way: <input type=\"number\" ng-model=\"controller.twoWay\" /></div>\r\n<div>\r\n\t<label>Doubled value:</label>\r\n\t{{controller.doubledValue}}\r\n</div>"

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var angular = __webpack_require__(1);
	exports.moduleName = 'watchInService';
	var WatchedService = (function () {
	    function WatchedService() {
	    }
	    return WatchedService;
	}());
	var ServiceProviderController = (function () {
	    function ServiceProviderController(watchedService) {
	        this.watchedService = watchedService;
	    }
	    ServiceProviderController.$inject = ['watchedService'];
	    return ServiceProviderController;
	}());
	function serviceProvider() {
	    return {
	        restrict: 'E',
	        template: __webpack_require__(8),
	        controller: 'ServiceProviderController',
	        controllerAs: 'controller',
	        scope: {},
	    };
	}
	var WatchInServiceController = (function () {
	    function WatchInServiceController($scope, watchedService) {
	        var _this = this;
	        this.watchedService = watchedService;
	        $scope.$watch('controller.watchedService.watchedValue', function (value) {
	            _this.doubledValue = value * 2;
	        });
	    }
	    WatchInServiceController.$inject = ['$scope', 'watchedService'];
	    return WatchInServiceController;
	}());
	function watchInService() {
	    return {
	        restrict: 'E',
	        template: __webpack_require__(9),
	        controller: 'WatchInServiceController',
	        controllerAs: 'controller',
	        scope: {},
	    };
	}
	angular.module(exports.moduleName, [])
	    .controller('WatchInServiceController', WatchInServiceController)
	    .directive('tsWatchInService', watchInService)
	    .service('watchedService', WatchedService)
	    .controller('ServiceProviderController', ServiceProviderController)
	    .directive('tsServiceProvider', serviceProvider);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2hJblNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3YXRjaEluU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBWSxPQUFPLFdBQU0sU0FBUyxDQUFDLENBQUE7QUFFdEIsa0JBQVUsR0FBVyxnQkFBZ0IsQ0FBQztBQUVuRDtJQUFBO0lBRUEsQ0FBQztJQUFELHFCQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7QUFFRDtJQUVDLG1DQUFtQixjQUE4QjtRQUE5QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFBRyxDQUFDO0lBRDlDLGlDQUFPLEdBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRS9DLGdDQUFDO0FBQUQsQ0FBQyxBQUhELElBR0M7QUFFRDtJQUNDLE1BQU0sQ0FBQztRQUNOLFFBQVEsRUFBRSxHQUFHO1FBQ2IsUUFBUSxFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztRQUMzQyxVQUFVLEVBQUUsMkJBQTJCO1FBQ3ZDLFlBQVksRUFBRSxZQUFZO1FBQzFCLEtBQUssRUFBRSxFQUFFO0tBQ1QsQ0FBQztBQUNILENBQUM7QUFFRDtJQUlDLGtDQUFZLE1BQXNCLEVBQVMsY0FBOEI7UUFKMUUsaUJBU0M7UUFMMkMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQ3hFLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0NBQXdDLEVBQUUsVUFBQyxLQUFhO1lBQ3JFLEtBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFMTSxnQ0FBTyxHQUFhLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFNekQsK0JBQUM7QUFBRCxDQUFDLEFBVEQsSUFTQztBQUVEO0lBQ0MsTUFBTSxDQUFDO1FBQ04sUUFBUSxFQUFFLEdBQUc7UUFDYixRQUFRLEVBQUUsT0FBTyxDQUFDLHVCQUF1QixDQUFDO1FBQzFDLFVBQVUsRUFBRSwwQkFBMEI7UUFDdEMsWUFBWSxFQUFFLFlBQVk7UUFDMUIsS0FBSyxFQUFFLEVBQUU7S0FDVCxDQUFDO0FBQ0gsQ0FBQztBQUVELE9BQU8sQ0FBQyxNQUFNLENBQUMsa0JBQVUsRUFBRSxFQUFFLENBQUM7S0FDNUIsVUFBVSxDQUFDLDBCQUEwQixFQUFFLHdCQUF3QixDQUFDO0tBQ2hFLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxjQUFjLENBQUM7S0FDN0MsT0FBTyxDQUFDLGdCQUFnQixFQUFFLGNBQWMsQ0FBQztLQUN6QyxVQUFVLENBQUMsMkJBQTJCLEVBQUUseUJBQXlCLENBQUM7S0FDbEUsU0FBUyxDQUFDLG1CQUFtQixFQUFFLGVBQWUsQ0FBQyxDQUFDIn0=

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = "<h4>Service</h4>\r\n<div>\r\n\t<label for=\"watchedValue\">Watched value:</label>\r\n\t<input type=\"number\" name=\"watchedValue\" ng-model=\"controller.watchedService.watchedValue\" />\r\n</div>"

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = "<h2>Watch In Service</h2>\r\n<ts-service-provider></ts-service-provider>\r\n<h4>Directive</h4>\r\n<div>\r\n\t<label>Doubled value:</label>\r\n\t{{controller.doubledValue}}\r\n</div>"

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,